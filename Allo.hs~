module Main where

import qualified Data.Set as S
import qualified Data.Map as M
import Data.List ( tails, inits, insert, (\\), isInfixOf, nub, maximumBy , sortBy)
import Data.Char ( isAlphaNum, ord )
import System.Process( system )
import Data.List.Split
import Data.Ord
import System.IO 
import System.Environment
import Debug.Trace

--------------------------------------------------------------------------------
-- main

main :: IO ()
main = do
       file <- getArgs
       corpus <- readCorpus $ head file
       ftab <- cplex (corpusToProblem (take (read (file!!1)::Int) corpus))
       putStr $ unlines $ map show $ M.toList ftab

--------------------------------------------------------------------------------
-- corpus (table of word + feature list)

type Feature = String
type Corpus  = [(String,[Feature])]

readCorpus :: FilePath -> IO Corpus
readCorpus file = do
  l <- readFile file 
  let ws        = (map (splitOn "\t")  (lines l)) 
      getFeats  =      
            \w -> 
              let fs = (splitOn ";" (w !! 2)) in
                (head fs, 
                 map (\feat -> 
                        if elem feat ["SG" ,"PL","DEF","INDF"] 
                        -- distinguish between Verb Numerus and Noun Numerus etc
                      
                         then  
                          head fs ++ "." ++ feat else feat)  (tail fs))
                         

  return $ concat [ nub [     
                          (w !! 1, w !! 0 : ( snd  (getFeats w))),
                          (w !! 0, w!!0 : (standardForm (fst (getFeats w))))  
                          -- add entry for the standard form (if not already given)  
                        ] 
                  | w <- ws
                  ]


standardForm "V" = ["NFIN"]
standardForm "N" = ["NOM","N.SG"]
standardForm "V.PTCP" = ["NFIN"]
standardForm "ADJ" = ["INDF","ADJ.SG"]
standardForm "V.CVB" = ["ACT"]
standardForm x = error $ show x
       
corpus1 :: Corpus
corpus1 =
  [ ("bil",   ["car","sg"])
  , ("bilar", ["car","pl"])
  , ("duk",   ["cloth","sg"])
  , ("dukar", ["cloth","pl"])
  , ("böcker",   ["book","pl"])
  , ("bok",     ["book","sg"])
  , ("son", ["son", "sg"])
  , ("söner", ["son","pl"])
  , ("katt", ["cat", "sg"])
  , ("katter", ["cat", "pl"])
  , ("glas", ["glass","sg"])
  , ("glas", ["glass","pl"])
  , ("ämne", ["topic", "sg"])
  , ("ämnen", ["topic", "pl"])
  ]

corpus2 :: Corpus
corpus2 =
  [ ("gehen",    ["walk","inf"])
  , ("gegangen", ["walk","pastperfect"])
  , ("sehen",    ["see","inf"])
  , ("gesehen",  ["see","pastperfect"])
  , ("machen",   ["do","inf"])
  , ("gemacht",  ["do","pastperfect"])
  , ("laufen",   ["run","inf"])
  , ("gelaufen", ["run","pastperfect"])
  , ("kaufen",   ["buy","inf"])
  , ("gekauft",  ["buy","pastperfect"])
  ]

corpus3 :: Corpus
corpus3 =
  [ ("word",   ["become","p1sg"])
  , ("wordt",  ["become","p2sg"])
  , ("wordt",  ["become","p3sg"])
  , ("worden", ["become","p2pl"])
  , ("geworden",["become","pastp"])
  , ("hoor",   ["hear","p1sg"])
  , ("hoort",  ["hear","p2sg"])
  , ("hoort",  ["hear","p3sg"])
  , ("horen",  ["hear","p1pl"])
  , ("gehoord",["hear","pastp"])
  , ("werk",   ["work","p1sg"])
  , ("werkt",  ["work","p2sg"])
  , ("werkt",  ["work","p3sg"])
  , ("werken", ["work","p1pl"])
  , ("gewerkt",["work","pastp"])
  , ("ga",    ["go","p1sg"])
  , ("gaat",  ["go","p2sg"])
  , ("gaat",  ["go","p3sg"])
  , ("gaan",  ["go","p1pl"])
  , ("gegaan",["go","pastp"])
  ]

--------------------------------------------------------------------------------
-- problem (to be solved by an LP solver)

type Name   = String
type Term   = (Integer,Name)
data Constr = [Term] :=: Integer | [Term] :>=: Integer deriving ( Show )

lhs :: Constr -> [Term]
lhs (axs :>=: c) = axs
lhs (axs :=:  c) = axs

data Problem
  = Problem
  { minimise :: [Term]
  , constrs  :: [Constr]
  }

--------------------------------------------------------------------------------
-- corpus -> problem

cost :: String -> String -> Int
cost s f = 1
-- cost s f = if (nonStemfeat f) then 100 
  --            else if f `isInfixOf` s then 101 
    --                 else  100 - (length [(a,b) | (a,b) <- zip s f, a == b])
--cost s = 1000-length s

nonStemfeat f = elem f ["N.INDF","ACT","PASS","N.DEF","MASC+FEM","V.CVB","NEUT",
                        "ACC","DAT","V.PL","IND","GEN","SBJV","3","V.SG","V",
                        "NFIN","PST","PRS","V.PTCP","N.PL","N.SG",
                        "ADJ.DEF", "ADJ.INDF", "SPRL", "COMPV"]

corpusToProblem :: Corpus -> Problem
corpusToProblem corp =
  Problem
  { minimise = [ (fromIntegral (cost s f),f `allo` s)
               | (f,ss) <- M.toList featMap
               , s <- S.toList ss -- , nonStemfeat f
               ] --  "s is an allomorph of feature f"
 
  , constrs  = [ c
               | ((w,fs),i) <- corp `zip` [1..]
               , c <- constrsFor i w fs
               ]
  }
 where
 
  -- map of all features of each word mapped with the substrings of the word
  
  featMap = M.fromListWith S.union 
            [ (f,S.singleton s)
            | (w,fs) <- corp
            , s <- subs w
            , f <- fs
            ]

  constrsFor i w fs =
   
    -- exactly one part for each letter l
    [ [ (1,p) | (p,ls) <- parts `zip` (concat (map subs_ w')), l `elem` ls ] :=: 1
    | l <- [1..last (concat w')]
    ] ++
    
    -- if a part exists, at least one feature must explain it
    [ ((-1,p) : [ (1,f `allo` s) | f <- fs ]) :>=: 0
    | (p,s) <- (parts `zip` subs w)
    ] ++
    
    -- every feature must explain some part of the word (can be the empty string as well)
    concat
    [ [ [ (1,p ++ "_" ++ f) | p <- parts ] :>=: 1 ] ++ -- alla features måste ge någon partition
    
      [ [ (-1,p ++ "_" ++ f), (1,f `allo` s) ] :>=: 0 
      
      | (p,s) <- parts `zip` subs w
      
      ] ++
      [ [ (-1,p ++ "_" ++ f), (1,p) ] :>=: 0 
      | (p,s) <- parts `zip` subs w
      ]
    | f <- fs
    ]
   where
    -- the word, but every letter is now unique    
    w' = case (length (head (splitOn "-" w))) of
          n -> filter (not.null) [map snd (w `zip` [1..n]), map snd ((drop n w) `zip` [(n+1)..])]
       
    -- a unique name for every possible partition of the word    
    parts = [ "w" ++ show i ++ "_" ++ 
              (map (\x -> if x == '-' || x == ' ' then '1' else x) w) ++ "_" ++ show j ++ "_" ++ s
            | (s,j) <- subs w `zip` [1..]
            ]
{-
    parts = [ "w" ++ show i ++ "_" ++ (map (\x -> if x == '-' || x == ' ' then '1' else x) w) ++ "_" ++ show j ++ "_" ++ s
            | (s,j) <- subs w `zip` [1..]
            ]
-}

allo :: Feature -> String -> Name
f `allo` s = map (\x -> if x == '-' || x == ' ' then '1' else x) $ "allo_" ++ f ++ "_" ++ s


-- We do not consider substrings across "-"'s.
subs :: String -> [String]
subs xs = case splitOn "-" xs of
  [as,bs] -> xs : (init (subs as)) ++ subs bs 
  _       -> case splitOn " " xs of
               [as,bs] -> xs : (init (subs as)) ++ subs bs
               _       -> subs_ xs
  

subs_ :: [a] -> [[a]]
subs_ []     = [[]]
subs_ (x:xs) = [ x:ys | ys <- inits xs ] ++ subs_ xs

--------------------------------------------------------------------------------
-- solving a problem with cplex, and parsing the solution

cplex :: Problem -> IO (M.Map Feature [String])
cplex p =
  do putStrLn "+++ Generating input file..."
     writeFile "input.lp" $ unlines $
       [ "MINIMIZE"
       , "  " ++ showTerms (minimise p)
       , "SUBJECT TO"
       ] ++
       [ "  " ++ showConstr c
       | c <- constrs p
       ] ++
       [ "BINARY"
       ] ++
       [ "  " ++ v
       | v <- vs
       ] ++
       [ "END"
       ]
     writeFile "script.in" $ unlines $
       [ "r input.lp"
       , "opt"
       , "display solution variables *"
       , "quit"
       ]
     putStrLn "+++ Starting CPLEX..."
     system "cplex < script.in > solution.out"
     putStrLn "+++ Reading solution..."
     s <- readFile "solution.out"
     return $ M.fromListWith (++)
       [  (map (\x -> if x == '1' then '-' else x) (takeWhile (/= '_') v'), [drop 1 (dropWhile (/= '_') v')])
       | l <- lines s
       , take 5 l == "allo_"
       , [v,one] <- [words l]
       , read one == (1.0 :: Double)
       , let v' = drop 5 v
       ]
 where
  vs = S.toList $ S.fromList $
       [ x | (_,x) <- minimise p ] ++
       [ x | c <- constrs p, (_,x) <- lhs c ]

showTerms :: [Term] -> String
showTerms []  = "0"
showTerms axs = noPlus (unwords [ show' a x | (a,x) <- axs, a /= 0 ])
 where
  noPlus ('+':' ':s) = s
  noPlus ('+':s)     = s
  noPlus s           = s
  
  show' 1    x         = "+ " ++ x
  show' (-1) x         = "- " ++ x
  show' a    x | a > 0 = "+ " ++ show a ++ " " ++ x
  show' a    x | a < 0 = "- " ++ show (-a) ++ " " ++ x

showConstr :: Constr -> String
showConstr (axs :>=: c) = showTerms axs ++ " >= " ++ show c
showConstr (axs :=:  c) = showTerms axs ++ " = "  ++ show c

--------------------------------------------------------------------------------

usort :: Ord a => [a] -> [a]
usort = S.toList . S.fromList

--------------------------------------------------------------------------------

matches :: String -> String -> [[Int]]
matches pat word = go [(pat,[])] 0 word
 where
  go pats i [] =
    [ reverse is
    | (p,is) <- pats
    , eps p
    ]

  go pats i (c:cs) =
    go
    [ (bs, [ i | a /= '+', a /= '*' ]++is)
    | (pat,is) <- pats
    , bs <- eat c pat
    ]
    (i+1) cs

  eat c []        = []
  eat c ('+':pat) = ['*':pat]
  eat c ('*':pat) = ['*':pat] ++ eat c pat
  eat c (a  :pat) = [pat | a == c]

  eps []       = True
  eps ('*':as) = eps as
  eps _        = False

